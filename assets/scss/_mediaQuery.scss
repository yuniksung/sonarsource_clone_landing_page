
$breakpoints: (
    "320px": 320px,
    "375px": 375px,
    "425px": 425px,
    "458px": 458px,
    "650px": 650px,
    "768px": 768px,
    "1024px": 1024px,
    "1440px": 1440px,
    "1920px": 1920px,
  ) !default;
  
  $unit-intervals: (
    "px": 1,
    "em": 0.01,
    "rem": 0.1
  ) !default;
   
  
  @mixin media($conditions...) {
    @for $i from 1 through length($conditions) {
      $conditions: set-nth(
        $conditions,
        $i,
        parse-expression(nth($conditions, $i))
      ); 
    }
  
    $branches: get-query-branches($conditions);
    $query: "";
  
    @each $branch in $branches {
      @if (str-length($query) != 0) {
        $query: $query + ", ";
      }
  
      $query: $query + $branch;
    }
  
    @media #{$query} {
      @content;
    }
  }
  
  @function get-query-branches($expressions) {
    $result: "";
    $has-groups: false;
  
    // Getting initial snapshot and looking for groups
    @each $expression in $expressions {
      @if (str-length($result) != 0) {
        $result: $result + " and ";
      }
  
      @if (type-of($expression) == "string") {
        $result: $result + $expression;
      } @else if (type-of($expression) == "list") {
        $result: $result + nth($expression, 1);
        $has-groups: true;
      } @else {
        @warn '#{$expression} is not a valid expression.';
      }
    }
  
    // If we have groups, we have to create all possible combinations
    @if $has-groups {
      @each $expression in $expressions {
        @if (type-of($expression) == "list") {
          $first: nth($expression, 1);
  
          @each $member in $expression {
            @if ($member != $first) {
              @each $partial in $result {
                $result: join(
                  $result,
                  str-replace-first($first, $member, $partial)
                );
              }
            }
          }
        }
      }
    }
  
    @return $result;
  }
  
  @function parse-expression($expression) {
    $operator: "";
    $value: "";
    $element: "";
    $result: "";
    $is-width: true;
  
    @if (type-of($expression) != "string") {
      @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';
    }
  
    // Separating the operator from the rest of the expression
    @if (str-slice($expression, 2, 2) == "=") {
      $operator: str-slice($expression, 1, 2);
      $value: str-slice($expression, 3);
    } @else {
      $operator: str-slice($expression, 1, 1);
      $value: str-slice($expression, 2);
    }
  
    // Checking what type of expression we're dealing with
    @if map-has-key($breakpoints, $value) {
      $result: map-get($breakpoints, $value);
    } @else if map-has-key($media-expressions, $expression) {
      $result: map-get($media-expressions, $expression);
      $is-width: false;
    } @else {
      $result: to-number($value);
    }
  
    @if ($is-width) {
      $unit: unit($result);
      $interval: 0;
  
      @if (map-has-key($unit-intervals, $unit)) {
        $interval: map-get($unit-intervals, $unit);
      } @else {
        @warn 'Unknown unit: #{$unit}';
      }
  
      @if ($operator == ">") {
        $element: "(min-width: #{$result + $interval})";
      } @else if ($operator == "<") {
        $element: "(max-width: #{$result - $interval})";
      } @else if ($operator == ">=") {
        $element: "(min-width: #{$result})";
      } @else if ($operator == "<=") {
        $element: "(max-width: #{$result})";
      } @else {
        @warn '#{$expression} is missing an operator.';
      }
    } @else {
      $element: $result;
    }
  
    @return $element;
  }
  